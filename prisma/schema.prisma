// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdIssues  Issue[] @relation("Reporter")
  assignedIssues Issue[] @relation("Assignee")
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String //This will store clerk organization ID.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sprints        Sprint[]
  issues         Issue[]

  @@unique([organizationId, key])
}

model Sprint {
  id        String       @id @default(cuid())
  name      String       @unique
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  projectId String
  Issue   Issue[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

model Issue {
  id          String        @id @default(cuid())
  assigneeId  String?
  reporterId  String
  title       String
  description String?
  status      IssueStatus
  order       Int
  priority    IssuePriority
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sprintId    String?
  projectId   String

  assignee User?   @relation("Assignee", fields: [assigneeId], references: [id])
  reporter User    @relation("Reporter", fields: [reporterId], references: [id])
  sprint   Sprint?  @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([status, order])
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
